# Setup the valid faces on Amazon S3, Rekognition and DynamoDB

import boto3
import os
import argparse
from tqdm import tqdm
import glob
import time

# Amazon S3, DynamoDB and Rekognition clients
s3 = boto3.resource('s3', region_name='eu-west-1')
dynamoDBClient = boto3.client('dynamodb', region_name='eu-west-1')
rekognitionClient = boto3.client('rekognition', region_name='eu-west-1')

# Arguments
ap = argparse.ArgumentParser()
ap.add_argument("--facesFolder", help="folder containing faces", required=True)
args = vars(ap.parse_args())

# Folder where the faces are stored
FACES_FOLDER = args["facesFolder"]

# S3 Storage for faces
S3_FACE_DATA_BUCKET_NAME = "facetrackdbimages"
S3_FACE_DATA_BUCKET_SUB = "index"

# DynamoDB table where faces are indexed
DYNAMODB_FACEDATA_TABLE_NAME = "family_collection"

# Rekognition collection id
REKOGNITIION_COLLECTION_ID = "family_collection"

####################################
# Check faces folder valid
####################################

def getNumFilesInFacesFolder(facesFolder):
    trainPath = os.path.join(facesFolder, "./*/*.jpg").replace("\\", "/")
    filesFound = glob.glob(trainPath)
    return len(filesFound)

####################################
# Add faces
####################################

def addFacesToAmazon(facesFolder):

    # Assign sensible names to images based on person
    label_count_map = {}
    facesAddedCount = 0
    trainPath = os.path.join(facesFolder, "./*/*.jpg").replace("\\", "/")
    for imgName in tqdm(glob.glob(trainPath)):

        # Get label
        splitPath = os.path.split(imgName)
        labelName = os.path.split(splitPath[0])[1]
        if labelName not in label_count_map:
            label_count_map[labelName] = 0
        else:
            label_count_map[labelName] += 1
        genFileName = S3_FACE_DATA_BUCKET_NAME + '/' + labelName + "_" + str(label_count_map[labelName])
        # print("File {} processing to label {} and genName {}".format(imgName, labelName, genFileName))

        # Add to S3
        file = open(imgName, 'rb')
        object = s3.Object(S3_FACE_DATA_BUCKET_NAME, genFileName)
        ret = object.put(Body=file,
                        Metadata={'FullName':labelName}
                        )
        file.close()
        # print("Added to S3 ret {}".format(ret))

        # Index faces in Rekognition
        try:
            response = rekognitionClient.index_faces(
                Image={"S3Object":
                           {"Bucket": S3_FACE_DATA_BUCKET_NAME,
                            "Name": genFileName}},
                CollectionId=REKOGNITIION_COLLECTION_ID)
            # print("Added to Rekognition response {}".format(response))
        except rekognitionClient.exceptions.InvalidParameterException as excp:
            print("Failed to add to Rekognition file {} gen {} response {}".format(imgName, genFileName, excp))
            continue

        # Add the id generated by Rekognition to DynamoDB so we can get back to the person's name
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            if len(response['FaceRecords']) == 1:
                faceId = response['FaceRecords'][0]['Face']['FaceId']
                try:
                    putItemResponse = dynamoDBClient.put_item(
                        TableName=DYNAMODB_FACEDATA_TABLE_NAME,
                        Item={
                            'RekognitionId': {'S': faceId},
                            'FullName': {'S': labelName}
                        })
                    if putItemResponse["ResponseMetadata"]["HTTPStatusCode"] == 200:
                        # print("Added faceId {} and name for {}".format(faceId, labelName))
                        facesAddedCount += 1
                    else:
                        print(
                            "Non 200 response adding image {} to DynamoDB faceId {}, name {}".format(imgName, faceId,
                                                                                                       labelName))
                except dynamoDBClient.exceptions.ResourceNotFoundException as excp:
                    print("Resource not found adding image {} to DynamoDB faceId {}, name {}".format(imgName, faceId, labelName))
            else:
                print("Failed attempting to add image {} = no faces found".format(imgName))
        else:
            print("Failed attempting to add image {} = non 200 response {}".format(imgName,
                                                                    response['ResponseMetadata']['HTTPStatusCode']))
    return facesAddedCount


####################################
# S3 housekeeping functions
####################################

def s3ClearFolder():
    print("Clearing S3 bucket {} subfolder {}".format(S3_FACE_DATA_BUCKET_NAME, S3_FACE_DATA_BUCKET_SUB))
    bucket = s3.Bucket(S3_FACE_DATA_BUCKET_NAME)
    bucketFiltered = bucket.objects.filter(Prefix=S3_FACE_DATA_BUCKET_SUB)
    bucketFiltered.delete()
    pass

####################################
# DynamoDB housekeeping functions
####################################

def dynamoDBDeleteTable(table_name):
    print("Deleting DynamoDB table {}".format(table_name))
    try:
        dynamoDBClient.delete_table(TableName=table_name)
    except dynamoDBClient.exceptions.ResourceNotFoundException as excp:
        pass
    except Exception as excp:
        print("Failed to delete table {}, excp {}".format(table_name, str(excp)))

def dynamoDBCreateTable(table_name):
    waiter = dynamoDBClient.get_waiter('table_not_exists')
    waiter.wait(TableName=table_name)
    print('Creating DynamoDB table')
    table = dynamoDBClient.create_table(
        TableName=table_name,
        KeySchema=[
            {
                'AttributeName': 'RekognitionId',
                'KeyType': 'HASH'
            }
        ],
        AttributeDefinitions= [
            {
                'AttributeName': 'RekognitionId',
                'AttributeType': 'S'
            }
        ],
        ProvisionedThroughput={
            'ReadCapacityUnits': 1,
            'WriteCapacityUnits': 1
        },
        StreamSpecification={
            'StreamEnabled': False
        }
    )
    if table["ResponseMetadata"]["HTTPStatusCode"] is not 200:
        return False
    # Need to wait here until creation is complete - sleep seems to speed things up :)
    time.sleep(2.0)
    waiter = dynamoDBClient.get_waiter('table_exists')
    waiter.wait(TableName=table_name)
    print("Created table {} HTTP result {}".format(table_name, table["ResponseMetadata"]["HTTPStatusCode"]))
    return True

def dynamoDBClear():
    dynamoDBDeleteTable(DYNAMODB_FACEDATA_TABLE_NAME)
    # The "waiter" in create table works better with this delay!
    time.sleep(2.0)
    return dynamoDBCreateTable(DYNAMODB_FACEDATA_TABLE_NAME)

####################################
# Rekognition housekeeping functions
####################################

def rekognitionDeleteCollection(collectionId):
    try:
        rekognitionClient.delete_collection(CollectionId=collectionId)
    except rekognitionClient.exceptions.ResourceNotFoundException:
        pass
    except Exception as excp:
        print("Failed to remove Rekognition collection {}, excp {}".format(collectionId, str(excp)))

def rekognitionCreateCollection(collectionId):
    try:
        rekognitionClient.create_collection(CollectionId=collectionId)
    except Exception as excp:
        print("Failed to remove Rekognition collection {}, excp {}".format(collectionId, str(excp)))

def rekognitionDebugListFaces(collectionId):
    response = rekognitionClient.list_faces(CollectionId=collectionId,
                                 MaxResults=1000)
    faces = response['Faces']
    for face in faces:
        print(face)

def rekognitionClear():
    rekognitionDeleteCollection(REKOGNITIION_COLLECTION_ID)
    rekognitionCreateCollection(REKOGNITIION_COLLECTION_ID)

if __name__ == "__main__":
    numFacesToAdd = getNumFilesInFacesFolder(FACES_FOLDER)
    if numFacesToAdd <= 0:
        print("Source folder contains no data {}".format(FACES_FOLDER))
        exit(1)
    print("Adding {} faces to Amazon services".format(numFacesToAdd))
    s3ClearFolder()
    if not dynamoDBClear():
        print("Failed to create DynamoDB table")
        exit(2)
    rekognitionClear()
    numAdded = addFacesToAmazon(FACES_FOLDER)
    print("Completed: {} faces added to Amazon".format(numAdded))
    exit(0)
